apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: domain-multi-step-generator
  title: Domain Multi-Step Stack Generator
  description: Select domain, frontend, backend, and database step-by-step with domain-based options
  tags:
    - generator
    - frontend
    - backend
    - database

spec:
  owner: user:your-username
  type: service

  parameters:
    - title: Domain Selection
      required:
        - domain
      properties:
        domain:
          title: Select a Domain
          type: string
          enum:
            - Banking
            - Insurance
            - HealthCare
            - Education

  steps:
    # Step 1: Select domain (passed as parameter)
    - id: select-domain
      name: Domain Selected
      action: pass
      input:
        domain: ${{ parameters.domain }}

    # Step 2: Select Frontend based on domain
    - id: select-frontend
      name: Select UI Framework
      action: pass
      input:
        domain: ${{ steps.select-domain.output.domain }}
      parameters:
        frontend:
          oneOf:
            - title: Banking UI Framework
              if:
                properties:
                  domain:
                    const: Banking
              then:
                type: string
                enum: [Vue.js, Next.js, Typescript]
            - title: Insurance UI Framework
              if:
                properties:
                  domain:
                    const: Insurance
              then:
                type: string
                enum: [React, Angular]
            - title: HealthCare UI Framework
              if:
                properties:
                  domain:
                    const: HealthCare
              then:
                type: string
                enum: [Three.js, ReactJs, Angular 2+]
            - title: Education UI Framework
              if:
                properties:
                  domain:
                    const: Education
              then:
                type: string
                enum: [Vue.js, Next.js, Typescript, Three.js, ReactJs, Angular 2+]

    # Step 3: Select Backend based on domain
    - id: select-backend
      name: Select Backend Platform
      action: pass
      input:
        domain: ${{ steps.select-domain.output.domain }}
      parameters:
        backend:
          oneOf:
            - title: Banking Backend Platform
              if:
                properties:
                  domain:
                    const: Banking
              then:
                type: string
                enum: [Java, Python, Ruby]
            - title: Insurance Backend Platform
              if:
                properties:
                  domain:
                    const: Insurance
              then:
                type: string
                enum: [Scala, Go, Django]
            - title: HealthCare Backend Platform
              if:
                properties:
                  domain:
                    const: HealthCare
              then:
                type: string
                enum: [Springboot, ASP.NET]
            - title: Education Backend Platform
              if:
                properties:
                  domain:
                    const: Education
              then:
                type: string
                enum: [Java, Python, Ruby, PHP Kotlin, C sharp, Perl, Scala, Go, Djangi, Springboot, ASP.NET]

    # Step 4: Select Database based on domain
    - id: select-database
      name: Select Database
      action: pass
      input:
        domain: ${{ steps.select-domain.output.domain }}
      parameters:
        database:
          oneOf:
            - title: Banking Database
              if:
                properties:
                  domain:
                    const: Banking
              then:
                type: string
                enum: [MYSQL, PostgreSQL]
            - title: Insurance Database
              if:
                properties:
                  domain:
                    const: Insurance
              then:
                type: string
                enum: [MYSQL, PostgreSQL]
            - title: HealthCare Database
              if:
                properties:
                  domain:
                    const: HealthCare
              then:
                type: string
                enum: [MYSQL, PostgreSQL]
            - title: Education Database
              if:
                properties:
                  domain:
                    const: Education
              then:
                type: string
                enum: [MYSQL, PostgreSQL]

    # Step 5: Repository URL
    - id: repo-url
      name: Repository URL
      action: pass
      input:
        repoUrl: ${{ parameters.repoUrl }}

  steps:
    # Fetch skeleton and values
    - id: fetch
      name: Fetch Skeleton
      action: fetch:template
      input:
        url: ./skeleton
        values:
          domain: ${{ parameters.domain }}
          frontend: ${{ steps.select-frontend.parameters.frontend }}
          backend: ${{ steps.select-backend.parameters.backend }}
          database: ${{ steps.select-database.parameters.database }}
          repoUrl: ${{ steps.repo-url.input.repoUrl }}

    # Publish generated project to GitHub
    - id: publish
      name: Publish to GitHub
      action: publish:github
      input:
        description: Generated project for ${{ parameters.domain }} with ${{ steps.select-frontend.parameters.frontend }} frontend and ${{ steps.select-backend.parameters.backend }} backend.
        repoUrl: ${{ steps.repo-url.input.repoUrl }}

    # Register the project in catalog
    - id: register
      name: Register in Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in VSCode
        url: https://vscode.dev/github/${{ steps.repo-url.input.repoUrl | parseRepoUrl | pick('owner') }}/${{ steps.repo-url.input.repoUrl | parseRepoUrl | pick('repo') }}
      - title: Open in Replit
        url: https://replit.com/github/${{ steps.repo-url.input.repoUrl | parseRepoUrl | pick('owner') }}/${{ steps.repo-url.input.repoUrl | parseRepoUrl | pick('repo') }}
      - title: Open in AI Studio
        url: https://aistudio.example.com/project/${{ steps.repo-url.input.repoUrl | parseRepoUrl | pick('owner') }}/${{ steps.repo-url.input.repoUrl | parseRepoUrl | pick('repo') }}
      - title: Open in Catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
